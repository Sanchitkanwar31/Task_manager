{"ast":null,"code":"var _jsxFileName = \"D:\\\\dell\\\\Html project\\\\intern_march\\\\TASK_MANAGER\\\\client\\\\src\\\\Tasklist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"http://localhost:8000\"; // backend url\n\nconst TaskList = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\",\n    status: false\n  });\n\n  // Fetch all tasks\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch(`${API_URL}/tasks`);\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n\n  // Create a new task\n  const handleCreate = async () => {\n    if (!newTask.title || !newTask.description) {\n      alert(\"Title and Description are required!\");\n      return;\n    }\n    try {\n      var _newTask$status;\n      const response = await fetch(`${API_URL}/newtasks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: newTask.title,\n          description: newTask.description,\n          status: (_newTask$status = newTask.status) !== null && _newTask$status !== void 0 ? _newTask$status : false // Ensure status is always sent\n        })\n      });\n      if (response.ok) {\n        fetchTasks(); // Refresh task list\n        setNewTask({\n          title: \"\",\n          description: \"\",\n          status: false\n        }); // Reset input\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Update task status\n  const handleUpdate = async id => {\n    const taskToUpdate = tasks.find(t => t.id === id);\n    if (!taskToUpdate) return;\n    try {\n      await fetch(`${API_URL}/updatetasks/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: taskToUpdate.title,\n          description: taskToUpdate.description,\n          status: true // Mark as completed\n        })\n      });\n      fetchTasks(); // Refresh task list\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Delete task\n  const handleDelete = async id => {\n    try {\n      await fetch(`${API_URL}/deltasks/${id}`, {\n        method: \"DELETE\"\n      });\n      fetchTasks(); // Refresh task list\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  const [editTaskId, setEditTaskId] = useState(null);\n  const handleEditClick = id => {\n    setEditTaskId(id);\n  };\n  const handleSaveEdit = async id => {\n    const title = document.getElementById(`title-${id}`).value;\n    const description = document.getElementById(`desc-${id}`).value;\n    try {\n      await fetch(`${API_URL}/updatetasks/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title,\n          description,\n          status: tasks.find(task => task.id === id).status\n        })\n      });\n      fetchTasks(); // Refresh task list after update\n      setEditTaskId(null); // Exit edit mode\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Load tasks on component mount\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Title\",\n      value: newTask.title,\n      onChange: e => setNewTask({\n        ...newTask,\n        title: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Description\",\n      value: newTask.description,\n      onChange: e => setNewTask({\n        ...newTask,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreate,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: editTaskId === task.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editTask.title,\n            onChange: e => setEditTask({\n              ...editTask,\n              title: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: editTask.description,\n            onChange: e => setEditTask({\n              ...editTask,\n              description: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleSaveEdit(task.id),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setEditTaskId(null),\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [task.title, \" - \", task.description, \" - \", task.status ? \"✅ Completed\" : \"⏳ Pending\", /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleUpdate(task.id),\n            children: \"Complete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDelete(task.id),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleEditClick(task),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 5\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"0BIvR4gg34IGSPhB/vgMoOmn6gk=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","TaskList","_s","tasks","setTasks","newTask","setNewTask","title","description","status","fetchTasks","response","fetch","data","json","error","console","handleCreate","alert","_newTask$status","method","headers","body","JSON","stringify","ok","handleUpdate","id","taskToUpdate","find","t","handleDelete","editTaskId","setEditTaskId","handleEditClick","handleSaveEdit","document","getElementById","value","task","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","e","target","onClick","map","editTask","setEditTask","_c","$RefreshReg$"],"sources":["D:/dell/Html project/intern_march/TASK_MANAGER/client/src/Tasklist.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst API_URL = \"http://localhost:8000\"; // backend url\r\n\r\nconst TaskList = () => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState({ title: \"\", description: \"\", status: false });\r\n\r\n  // Fetch all tasks\r\n  const fetchTasks = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/tasks`);\r\n      const data = await response.json();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  };\r\n\r\n  // Create a new task\r\n  const handleCreate = async () => {\r\n    if (!newTask.title || !newTask.description) {\r\n      alert(\"Title and Description are required!\");\r\n      return;\r\n    }\r\n  \r\n    try {\r\n      const response = await fetch(`${API_URL}/newtasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          title: newTask.title,\r\n          description: newTask.description,\r\n          status: newTask.status ?? false, // Ensure status is always sent\r\n        }),\r\n      });\r\n  \r\n      if (response.ok) {\r\n        fetchTasks(); // Refresh task list\r\n        setNewTask({ title: \"\", description: \"\", status: false }); // Reset input\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n  \r\n  // Update task status\r\n  const handleUpdate = async (id) => {\r\n    const taskToUpdate = tasks.find((t) => t.id === id);\r\n    if (!taskToUpdate) return;\r\n  \r\n    try {\r\n      await fetch(`${API_URL}/updatetasks/${id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          title: taskToUpdate.title, \r\n          description: taskToUpdate.description, \r\n          status: true, // Mark as completed\r\n        }),\r\n      });\r\n  \r\n      fetchTasks(); // Refresh task list\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n    }\r\n  };\r\n  \r\n  // Delete task\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await fetch(`${API_URL}/deltasks/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      fetchTasks(); // Refresh task list\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  const [editTaskId, setEditTaskId] = useState(null);\r\n\r\nconst handleEditClick = (id) => {\r\n  setEditTaskId(id);\r\n};\r\n\r\nconst handleSaveEdit = async (id) => {\r\n  const title = document.getElementById(`title-${id}`).value;\r\n  const description = document.getElementById(`desc-${id}`).value;\r\n\r\n  try {\r\n    await fetch(`${API_URL}/updatetasks/${id}`, {\r\n      method: \"PUT\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ title, description, status: tasks.find(task => task.id === id).status }),\r\n    });\r\n\r\n    fetchTasks(); // Refresh task list after update\r\n    setEditTaskId(null); // Exit edit mode\r\n  } catch (error) {\r\n    console.error(\"Error updating task:\", error);\r\n  }\r\n};\r\n\r\n  // Load tasks on component mount\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Task Manager</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Task Title\"\r\n        value={newTask.title}\r\n        onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Task Description\"\r\n        value={newTask.description}\r\n        onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\r\n      />\r\n      <button onClick={handleCreate}>Add Task</button>\r\n\r\n      {/* <ul>\r\n        {tasks.map((task) => (\r\n          <li key={task.id}>\r\n            {task.title} - {task.status ? \"✅ Completed\" : \"⏳ Pending\"}\r\n            <button onClick={() => handleUpdate(task.id)}>Complete</button>\r\n            <button onClick={() => handleDelete(task.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul> */}\r\n      <ul>\r\n  {tasks.map((task) => (\r\n    <li key={task.id}>\r\n      {editTaskId === task.id ? (\r\n        <>\r\n          <input\r\n            type=\"text\"\r\n            value={editTask.title}\r\n            onChange={(e) => setEditTask({ ...editTask, title: e.target.value })}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={editTask.description}\r\n            onChange={(e) => setEditTask({ ...editTask, description: e.target.value })}\r\n          />\r\n          <button onClick={() => handleSaveEdit(task.id)}>Save</button>\r\n          <button onClick={() => setEditTaskId(null)}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <>\r\n          {task.title} - {task.description} - {task.status ? \"✅ Completed\" : \"⏳ Pending\"}\r\n          <button onClick={() => handleUpdate(task.id)}>Complete</button>\r\n          <button onClick={() => handleDelete(task.id)}>Delete</button>\r\n          <button onClick={() => handleEditClick(task)}>Edit</button>\r\n        </>\r\n      )}\r\n    </li>\r\n  ))}\r\n</ul>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}