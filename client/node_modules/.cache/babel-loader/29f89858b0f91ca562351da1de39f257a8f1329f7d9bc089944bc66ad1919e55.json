{"ast":null,"code":"var _jsxFileName = \"D:\\\\dell\\\\Html project\\\\intern_march\\\\TASK_MANAGER\\\\client\\\\src\\\\Tasklist.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TaskList = ({\n  API_URL\n}) => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTask, setNewTask] = useState({\n    title: \"\",\n    description: \"\"\n  });\n  const [editTask, setEditTask] = useState(null); // Store the task being edited\n\n  // Fetch tasks\n  const fetchTasks = async () => {\n    try {\n      const response = await fetch(`${API_URL}/tasks`);\n      const data = await response.json();\n      setTasks(data);\n    } catch (error) {\n      console.error(\"Error fetching tasks:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchTasks();\n  }, []);\n\n  // Create a new task\n  const handleCreate = async () => {\n    if (!newTask.title || !newTask.description) {\n      alert(\"Title and Description are required!\");\n      return;\n    }\n    try {\n      const response = await fetch(`${API_URL}/newtasks`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newTask)\n      });\n      if (response.ok) {\n        fetchTasks(); // Refresh task list\n        setNewTask({\n          title: \"\",\n          description: \"\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error adding task:\", error);\n    }\n  };\n\n  // Update task (mark as complete)\n  const handleComplete = async id => {\n    const taskToUpdate = tasks.find(t => t.id === id);\n    if (!taskToUpdate) return;\n    try {\n      await fetch(`${API_URL}/updatetasks/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          title: taskToUpdate.title,\n          description: taskToUpdate.description,\n          status: true // Mark as completed\n        })\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Edit Task: Set edit mode\n  const startEdit = task => {\n    setEditTask(task);\n  };\n\n  // Save Edited Task\n  const handleUpdate = async () => {\n    if (!editTask.title || !editTask.description) {\n      alert(\"Title and Description are required!\");\n      return;\n    }\n    try {\n      await fetch(`${API_URL}/updatetasks/${editTask.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(editTask)\n      });\n      fetchTasks();\n      setEditTask(null); // Exit edit mode\n    } catch (error) {\n      console.error(\"Error updating task:\", error);\n    }\n  };\n\n  // Delete Task\n  const handleDelete = async id => {\n    try {\n      await fetch(`${API_URL}/deltasks/${id}`, {\n        method: \"DELETE\"\n      });\n      fetchTasks();\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Task Manager\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Title\",\n      value: newTask.title,\n      onChange: e => setNewTask({\n        ...newTask,\n        title: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Task Description\",\n      value: newTask.description,\n      onChange: e => setNewTask({\n        ...newTask,\n        description: e.target.value\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreate,\n      children: \"Add Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [task.title, \" - \", task.status ? \"✅ Completed\" : \"⏳ Pending\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleComplete(task.id),\n          children: \"Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => startEdit(task),\n          children: \"Edit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleDelete(task.id),\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), editTask && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Edit Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editTask.title,\n        onChange: e => setEditTask({\n          ...editTask,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: editTask.description,\n        onChange: e => setEditTask({\n          ...editTask,\n          description: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdate,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setEditTask(null),\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskList, \"+k86WUMhQaxnd9cQIGq2fMPpm04=\");\n_c = TaskList;\nexport default TaskList;\nvar _c;\n$RefreshReg$(_c, \"TaskList\");","map":{"version":3,"names":["useState","useEffect","jsxDEV","_jsxDEV","TaskList","API_URL","_s","tasks","setTasks","newTask","setNewTask","title","description","editTask","setEditTask","fetchTasks","response","fetch","data","json","error","console","handleCreate","alert","method","headers","body","JSON","stringify","ok","handleComplete","id","taskToUpdate","find","t","status","startEdit","task","handleUpdate","handleDelete","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","map","_c","$RefreshReg$"],"sources":["D:/dell/Html project/intern_march/TASK_MANAGER/client/src/Tasklist.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst TaskList = ({ API_URL }) => {\r\n  const [tasks, setTasks] = useState([]);\r\n  const [newTask, setNewTask] = useState({ title: \"\", description: \"\" });\r\n  const [editTask, setEditTask] = useState(null); // Store the task being edited\r\n\r\n  // Fetch tasks\r\n  const fetchTasks = async () => {\r\n    try {\r\n      const response = await fetch(`${API_URL}/tasks`);\r\n      const data = await response.json();\r\n      setTasks(data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching tasks:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, []);\r\n\r\n  // Create a new task\r\n  const handleCreate = async () => {\r\n    if (!newTask.title || !newTask.description) {\r\n      alert(\"Title and Description are required!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await fetch(`${API_URL}/newtasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(newTask),\r\n      });\r\n\r\n      if (response.ok) {\r\n        fetchTasks(); // Refresh task list\r\n        setNewTask({ title: \"\", description: \"\" });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error adding task:\", error);\r\n    }\r\n  };\r\n\r\n  // Update task (mark as complete)\r\n  const handleComplete = async (id) => {\r\n    const taskToUpdate = tasks.find((t) => t.id === id);\r\n    if (!taskToUpdate) return;\r\n\r\n    try {\r\n      await fetch(`${API_URL}/updatetasks/${id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          title: taskToUpdate.title,\r\n          description: taskToUpdate.description,\r\n          status: true, // Mark as completed\r\n        }),\r\n      });\r\n\r\n      fetchTasks();\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n    }\r\n  };\r\n\r\n  // Edit Task: Set edit mode\r\n  const startEdit = (task) => {\r\n    setEditTask(task);\r\n  };\r\n\r\n  // Save Edited Task\r\n  const handleUpdate = async () => {\r\n    if (!editTask.title || !editTask.description) {\r\n      alert(\"Title and Description are required!\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await fetch(`${API_URL}/updatetasks/${editTask.id}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(editTask),\r\n      });\r\n\r\n      fetchTasks();\r\n      setEditTask(null); // Exit edit mode\r\n    } catch (error) {\r\n      console.error(\"Error updating task:\", error);\r\n    }\r\n  };\r\n\r\n  // Delete Task\r\n  const handleDelete = async (id) => {\r\n    try {\r\n      await fetch(`${API_URL}/deltasks/${id}`, {\r\n        method: \"DELETE\",\r\n      });\r\n\r\n      fetchTasks();\r\n    } catch (error) {\r\n      console.error(\"Error deleting task:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Task Manager</h2>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Task Title\"\r\n        value={newTask.title}\r\n        onChange={(e) => setNewTask({ ...newTask, title: e.target.value })}\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Task Description\"\r\n        value={newTask.description}\r\n        onChange={(e) => setNewTask({ ...newTask, description: e.target.value })}\r\n      />\r\n      <button onClick={handleCreate}>Add Task</button>\r\n\r\n      <ul>\r\n        {tasks.map((task) => (\r\n          <li key={task.id}>\r\n            {task.title} - {task.status ? \"✅ Completed\" : \"⏳ Pending\"}\r\n            <button onClick={() => handleComplete(task.id)}>Complete</button>\r\n            <button onClick={() => startEdit(task)}>Edit</button>\r\n            <button onClick={() => handleDelete(task.id)}>Delete</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {/* Edit Task Form */}\r\n      {editTask && (\r\n        <div>\r\n          <h3>Edit Task</h3>\r\n          <input\r\n            type=\"text\"\r\n            value={editTask.title}\r\n            onChange={(e) => setEditTask({ ...editTask, title: e.target.value })}\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            value={editTask.description}\r\n            onChange={(e) => setEditTask({ ...editTask, description: e.target.value })}\r\n          />\r\n          <button onClick={handleUpdate}>Save</button>\r\n          <button onClick={() => setEditTask(null)}>Cancel</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}